import {
  require_fuzzy
} from "./chunk-H5SKQ72A.js";
import "./chunk-SY6NINGQ.js";
import "./chunk-FVIZKTCK.js";
import {
  add_locations,
  afterUpdate,
  append_styles,
  bind_this,
  bind_value,
  bubble_event,
  check_target,
  cleanup_styles,
  createEventDispatcher,
  each,
  hmr,
  html,
  if_block,
  index,
  init,
  legacy_api,
  legacy_rest_props,
  onMount,
  prop,
  remove_input_defaults,
  sanitize_slots,
  set_attribute,
  set_attributes,
  slot,
  spread_props,
  toggle_class
} from "./chunk-VZJNBKLV.js";
import {
  append,
  comment,
  preventDefault,
  set_text,
  template,
  text
} from "./chunk-SWDOWKNK.js";
import {
  $window,
  FILENAME,
  HMR,
  add_owner_effect,
  child,
  deep_read_state,
  derived_safe_equal,
  equals,
  event,
  first_child,
  get,
  legacy_pre_effect,
  legacy_pre_effect_reset,
  mark_module_end,
  mark_module_start,
  mutable_state,
  pop,
  push,
  reset,
  set,
  sibling,
  strict_equals,
  template_effect,
  tick
} from "./chunk-BWDDQV5P.js";
import "./chunk-SY6NINGQ.js";
import "./chunk-FVIZKTCK.js";
import "./chunk-EXIRPMAV.js";
import {
  __toESM
} from "./chunk-NNIHVWYK.js";

// node_modules/svelte-typeahead/src/Typeahead.svelte
var import_fuzzy = __toESM(require_fuzzy());

// node_modules/svelte-search/src/Search.svelte
mark_module_start();
Search[FILENAME] = "node_modules/svelte-search/src/Search.svelte";
var root = add_locations(template(`<form data-svelte-search="" action=""><label><!></label> <input></form>`), Search[FILENAME], [
  [81, 0, [[88, 2], [96, 2]]]
]);
function Search($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "value",
    "autofocus",
    "debounce",
    "label",
    "hideLabel",
    "id",
    "ref",
    "removeFormAriaAttributes"
  ]);
  push($$props, false, Search);
  let value = prop($$props, "value", 12, "");
  let autofocus = prop($$props, "autofocus", 8, false);
  let debounce = prop($$props, "debounce", 8, 0);
  let label = prop($$props, "label", 8, "Label");
  let hideLabel = prop($$props, "hideLabel", 8, false);
  let id = prop($$props, "id", 24, () => "search" + Math.random().toString(36));
  let ref = prop($$props, "ref", 12, null);
  let removeFormAriaAttributes = prop($$props, "removeFormAriaAttributes", 8, false);
  const dispatch = createEventDispatcher();
  let prevValue = value();
  let timeout = void 0;
  let calling = false;
  function debounceFn(fn) {
    if (calling) return;
    calling = true;
    timeout = setTimeout(
      () => {
        fn();
        calling = false;
      },
      debounce()
    );
  }
  onMount(() => {
    if (autofocus()) window.requestAnimationFrame(() => ref().focus());
    return () => clearTimeout(timeout);
  });
  afterUpdate(() => {
    if (value().length > 0 && strict_equals(value(), prevValue, false)) {
      if (debounce() > 0) {
        debounceFn(() => dispatch("type", value()));
      } else {
        dispatch("type", value());
      }
    }
    if (strict_equals(value().length, 0) && prevValue.length > 0) dispatch("clear");
    prevValue = value();
  });
  init();
  var form = root();
  var label_1 = child(form);
  var node = child(label_1);
  slot(node, $$props, "label", {}, ($$anchor2) => {
    var text2 = text();
    template_effect(() => set_text(text2, label()));
    append($$anchor2, text2);
  });
  reset(label_1);
  var input = sibling(label_1, 2);
  remove_input_defaults(input);
  let attributes;
  bind_this(input, ($$value) => ref($$value), () => ref());
  reset(form);
  template_effect(() => {
    set_attribute(form, "role", removeFormAriaAttributes() ? null : "search");
    set_attribute(form, "aria-labelledby", removeFormAriaAttributes() ? null : id());
    set_attribute(label_1, "id", `${id() ?? ""}-label`);
    set_attribute(label_1, "for", id());
    set_attribute(label_1, "style", hideLabel() && "position: absolute;height: 1px;width: 1px;overflow: hidden;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);white-space: nowrap;");
    attributes = set_attributes(input, attributes, {
      name: "search",
      type: "search",
      placeholder: "Search...",
      autocomplete: "off",
      spellcheck: "false",
      ...$$restProps,
      id: id()
    });
  });
  bind_value(input, value);
  event("input", input, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("change", input, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("focus", input, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("blur", input, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("keydown", input, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("submit", form, preventDefault(function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  }));
  append($$anchor, form);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Search = hmr(Search, () => Search[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Search[HMR].source;
    set(Search[HMR].source, module.default[HMR].original);
  });
}
var Search_default = Search;
mark_module_end(Search);

// node_modules/svelte-typeahead/src/Typeahead.svelte
mark_module_start();
Typeahead[FILENAME] = "node_modules/svelte-typeahead/src/Typeahead.svelte";
var root_2 = add_locations(template(`<li role="option" class="s-9oVP4gwxNZjj"><!></li>`), Typeahead[FILENAME], [[250, 8]]);
var root_4 = add_locations(template(`<div class="s-9oVP4gwxNZjj"><!></div>`), Typeahead[FILENAME], [[273, 6]]);
var root2 = add_locations(template(`<div data-svelte-typeahead="" role="combobox" aria-haspopup="listbox" class="s-9oVP4gwxNZjj"><!> <ul role="listbox" class="s-9oVP4gwxNZjj"><!> <!></ul></div>`), Typeahead[FILENAME], [[178, 0, [[241, 2]]]]);
var $$css = {
  hash: "s-9oVP4gwxNZjj",
  code: '\n  [data-svelte-typeahead].s-9oVP4gwxNZjj {\n    position: relative;\n    background-color: #fff;\n  }\n\n  ul.s-9oVP4gwxNZjj {\n    position: absolute;\n    top: 100%;\n    left: 0;\n    width: 100%;\n    margin: 0;\n    padding: 0;\n    list-style: none;\n    background-color: inherit;\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n  }\n\n  [aria-expanded="true"].s-9oVP4gwxNZjj ul:where(.s-9oVP4gwxNZjj) {\n    z-index: 1;\n  }\n\n  li.s-9oVP4gwxNZjj,\n  .no-results.s-9oVP4gwxNZjj {\n    padding: 0.25rem 1rem;\n  }\n\n  li.s-9oVP4gwxNZjj {\n    cursor: pointer;\n  }\n\n  li.s-9oVP4gwxNZjj:not(:last-of-type) {\n    border-bottom: 1px solid #e0e0e0;\n  }\n\n  li.s-9oVP4gwxNZjj:hover {\n    background-color: #e5e5e5;\n  }\n\n  .selected.s-9oVP4gwxNZjj {\n    background-color: #e5e5e5;\n  }\n\n  .selected.s-9oVP4gwxNZjj:hover {\n    background-color: #cacaca;\n  }\n\n  .disabled.s-9oVP4gwxNZjj {\n    opacity: 0.4;\n    cursor: not-allowed;\n  }\n\n  [data-svelte-search] label {\n    margin-bottom: 0.25rem;\n    display: inline-flex;\n    font-size: 0.875rem;\n  }\n\n  [data-svelte-search] input {\n    width: 100%;\n    padding: 0.5rem 0.75rem;\n    background: none;\n    font-size: 1rem;\n    border: 0;\n    border-radius: 0;\n    border: 1px solid #e5e5e5;\n  }\n\n  [data-svelte-search] input:focus {\n    outline-color: #0f62fe;\n    outline-offset: 2px;\n    outline-width: 1px;\n  }\n\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVHlwZWFoZWFkLnN2ZWx0ZSIsIm1hcHBpbmdzIjoiO0FBd1JBLEVBQUUsc0NBQXVCLENBQUM7QUFDMUIsSUFBSSxrQkFBa0I7QUFDdEIsSUFBSSxzQkFBc0I7QUFDMUI7O0FBRUEsRUFBRSxpQkFBRSxDQUFDO0FBQ0wsSUFBSSxrQkFBa0I7QUFDdEIsSUFBSSxTQUFTO0FBQ2IsSUFBSSxPQUFPO0FBQ1gsSUFBSSxXQUFXO0FBQ2YsSUFBSSxTQUFTO0FBQ2IsSUFBSSxVQUFVO0FBQ2QsSUFBSSxnQkFBZ0I7QUFDcEIsSUFBSSx5QkFBeUI7QUFDN0IsSUFBSSx3Q0FBd0M7QUFDNUM7O0FBRUEsRUFBRSxxQ0FBc0IsQ0FBQyx5QkFBRSxDQUFDO0FBQzVCLElBQUksVUFBVTtBQUNkOztBQUVBLEVBQUUsaUJBQUU7QUFDSixFQUFFLDBCQUFXLENBQUM7QUFDZCxJQUFJLHFCQUFxQjtBQUN6Qjs7QUFFQSxFQUFFLGlCQUFFLENBQUM7QUFDTCxJQUFJLGVBQWU7QUFDbkI7O0FBRUEsRUFBRSxpQkFBRSxLQUFLLGFBQWEsQ0FBQyxDQUFDO0FBQ3hCLElBQUksZ0NBQWdDO0FBQ3BDOztBQUVBLEVBQUUsaUJBQUUsTUFBTSxDQUFDO0FBQ1gsSUFBSSx5QkFBeUI7QUFDN0I7O0FBRUEsRUFBRSx3QkFBUyxDQUFDO0FBQ1osSUFBSSx5QkFBeUI7QUFDN0I7O0FBRUEsRUFBRSx3QkFBUyxNQUFNLENBQUM7QUFDbEIsSUFBSSx5QkFBeUI7QUFDN0I7O0FBRUEsRUFBRSx3QkFBUyxDQUFDO0FBQ1osSUFBSSxZQUFZO0FBQ2hCLElBQUksbUJBQW1CO0FBQ3ZCOztBQUVBLEVBQVUsMEJBQTJCLENBQUM7QUFDdEMsSUFBSSxzQkFBc0I7QUFDMUIsSUFBSSxvQkFBb0I7QUFDeEIsSUFBSSxtQkFBbUI7QUFDdkI7O0FBRUEsRUFBVSwwQkFBMkIsQ0FBQztBQUN0QyxJQUFJLFdBQVc7QUFDZixJQUFJLHVCQUF1QjtBQUMzQixJQUFJLGdCQUFnQjtBQUNwQixJQUFJLGVBQWU7QUFDbkIsSUFBSSxTQUFTO0FBQ2IsSUFBSSxnQkFBZ0I7QUFDcEIsSUFBSSx5QkFBeUI7QUFDN0I7O0FBRUEsRUFBVSxnQ0FBaUMsQ0FBQztBQUM1QyxJQUFJLHNCQUFzQjtBQUMxQixJQUFJLG1CQUFtQjtBQUN2QixJQUFJLGtCQUFrQjtBQUN0QiIsIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZXMiOlsiVHlwZWFoZWFkLnN2ZWx0ZSJdfQ== */'
};
function Typeahead($$anchor, $$props) {
  check_target(new.target);
  const $$slots = sanitize_slots($$props);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "id",
    "value",
    "data",
    "extract",
    "disable",
    "filter",
    "autoselect",
    "inputAfterSelect",
    "results",
    "focusAfterSelect",
    "showDropdownOnFocus",
    "showAllResultsOnFocus",
    "limit"
  ]);
  push($$props, false, Typeahead);
  append_styles($$anchor, $$css);
  const options = mutable_state();
  const resultsId = mutable_state();
  const showResults = mutable_state();
  let id = prop($$props, "id", 24, () => "typeahead-" + Math.random().toString(36));
  let value = prop($$props, "value", 12, "");
  let data = prop($$props, "data", 24, () => []);
  let extract = prop($$props, "extract", 8, (item) => item);
  let disable = prop($$props, "disable", 8, (item) => false);
  let filter = prop($$props, "filter", 8, (item) => false);
  let autoselect = prop($$props, "autoselect", 8, true);
  let inputAfterSelect = prop($$props, "inputAfterSelect", 8, "update");
  let results = prop($$props, "results", 28, () => []);
  let focusAfterSelect = prop($$props, "focusAfterSelect", 8, false);
  let showDropdownOnFocus = prop($$props, "showDropdownOnFocus", 8, false);
  let showAllResultsOnFocus = prop($$props, "showAllResultsOnFocus", 8, false);
  let limit = prop($$props, "limit", 8, Infinity);
  const dispatch = createEventDispatcher();
  let comboboxRef = mutable_state(null);
  let searchRef = mutable_state(null);
  let hideDropdown = mutable_state(false);
  let selectedIndex = mutable_state(-1);
  let prevResults = "";
  let isFocused = mutable_state(false);
  afterUpdate(() => {
    if (strict_equals(prevResults, get(resultsId), false) && autoselect()) {
      set(selectedIndex, getNextNonDisabledIndex());
    }
    if (strict_equals(prevResults, get(resultsId), false) && !$$slots["no-results"]) {
      set(hideDropdown, strict_equals(results().length, 0));
    }
    prevResults = get(resultsId);
  });
  async function select() {
    const result = results()[get(selectedIndex)];
    if (result.disabled) return;
    const selectedValue = extract()(result.original);
    const searchedValue = value();
    if (equals(inputAfterSelect(), "clear")) value("");
    if (equals(inputAfterSelect(), "update")) value(selectedValue);
    dispatch("select", {
      selectedIndex: get(selectedIndex),
      searched: searchedValue,
      selected: selectedValue,
      original: result.original,
      originalIndex: result.index
    });
    await tick();
    if (focusAfterSelect()) get(searchRef).focus();
    close();
  }
  function getNextNonDisabledIndex() {
    var _a, _b;
    let index2 = 0;
    let disabled = ((_a = results()[index2]) == null ? void 0 : _a.disabled) ?? false;
    while (disabled) {
      if (strict_equals(index2, results().length)) {
        index2 = 0;
      } else {
        index2 += 1;
      }
      disabled = ((_b = results()[index2]) == null ? void 0 : _b.disabled) ?? false;
    }
    return index2;
  }
  function change(direction) {
    let index2 = strict_equals(direction, 1) && strict_equals(get(selectedIndex), results().length - 1) ? 0 : get(selectedIndex) + direction;
    if (index2 < 0) index2 = results().length - 1;
    let disabled = results()[index2].disabled;
    while (disabled) {
      if (strict_equals(index2, results().length)) {
        index2 = 0;
      } else {
        index2 += direction;
      }
      disabled = results()[index2].disabled;
    }
    set(selectedIndex, index2);
  }
  const open = () => set(hideDropdown, false);
  const close = () => {
    set(hideDropdown, true);
    set(isFocused, false);
  };
  legacy_pre_effect(() => deep_read_state(extract()), () => {
    set(options, {
      pre: "<mark>",
      post: "</mark>",
      extract: extract()
    });
  });
  legacy_pre_effect(
    () => (import_fuzzy.default, deep_read_state(value()), deep_read_state(data()), get(options), deep_read_state(limit()), deep_read_state(filter()), deep_read_state(disable())),
    () => {
      results(import_fuzzy.default.filter(value(), data(), get(options)).filter(({ score }) => score > 0).slice(0, limit()).filter((result) => !filter()(result.original)).map((result) => ({
        ...result,
        disabled: disable()(result.original)
      })));
    }
  );
  legacy_pre_effect(
    () => (get(isFocused), deep_read_state(showAllResultsOnFocus()), deep_read_state(value()), deep_read_state(data()), deep_read_state(filter()), deep_read_state(disable()), deep_read_state(extract())),
    () => {
      if (get(isFocused) && showAllResultsOnFocus() && strict_equals(value().length, 0)) {
        results(data().filter((datum) => !filter()(datum)).map((original, index2) => ({
          disabled: disable()(original),
          index: index2,
          original,
          score: 0,
          string: extract()(original)
        })));
      }
    }
  );
  legacy_pre_effect(
    () => (deep_read_state(results()), deep_read_state(extract())),
    () => {
      set(resultsId, results().map((result) => extract()(result.original)).join(""));
    }
  );
  legacy_pre_effect(
    () => (get(hideDropdown), deep_read_state(results())),
    () => {
      set(showResults, !get(hideDropdown) && results().length > 0);
    }
  );
  legacy_pre_effect(
    () => (deep_read_state(showDropdownOnFocus()), get(showResults), get(isFocused)),
    () => {
      if (showDropdownOnFocus()) {
        set(showResults, get(showResults) && get(isFocused));
      }
    }
  );
  legacy_pre_effect_reset();
  init();
  var div = root2();
  event("click", $window, ({ target }) => {
    var _a;
    if (!get(hideDropdown) && !((_a = get(comboboxRef)) == null ? void 0 : _a.contains(target))) {
      close();
    }
  });
  var node = child(div);
  var aria_activedescendant = derived_safe_equal(() => get(selectedIndex) >= 0 && !get(hideDropdown) && results().length > 0 ? `${id()}-result-${get(selectedIndex)}` : null);
  {
    add_owner_effect(() => get(searchRef), Search_default);
    add_owner_effect(value, Search_default);
    Search_default(node, spread_props(
      {
        get id() {
          return id();
        },
        removeFormAriaAttributes: true
      },
      () => $$restProps,
      {
        get ref() {
          return get(searchRef);
        },
        set ref($$value) {
          set(searchRef, $$value);
        },
        "aria-autocomplete": "list",
        get "aria-controls"() {
          return `${id() ?? ""}-listbox`;
        },
        get "aria-labelledby"() {
          return `${id() ?? ""}-label`;
        },
        get "aria-activedescendant"() {
          return get(aria_activedescendant);
        },
        get value() {
          return value();
        },
        set value($$value) {
          value($$value);
        },
        $$events: {
          type($$arg) {
            bubble_event.call(this, $$props, $$arg);
          },
          input($$arg) {
            bubble_event.call(this, $$props, $$arg);
          },
          change($$arg) {
            bubble_event.call(this, $$props, $$arg);
          },
          focus: [
            function($$arg) {
              bubble_event.call(this, $$props, $$arg);
            },
            () => {
              open();
              if (showDropdownOnFocus() || showAllResultsOnFocus()) {
                set(showResults, true);
                set(isFocused, true);
              }
            }
          ],
          clear: [
            function($$arg) {
              bubble_event.call(this, $$props, $$arg);
            },
            open
          ],
          blur($$arg) {
            bubble_event.call(this, $$props, $$arg);
          },
          keydown: [
            function($$arg) {
              bubble_event.call(this, $$props, $$arg);
            },
            (e) => {
              var _a;
              if (strict_equals(results().length, 0)) return;
              switch (e.key) {
                case "Enter":
                  select();
                  break;
                case "ArrowDown":
                  e.preventDefault();
                  change(1);
                  break;
                case "ArrowUp":
                  e.preventDefault();
                  change(-1);
                  break;
                case "Escape":
                  e.preventDefault();
                  value("");
                  (_a = get(searchRef)) == null ? void 0 : _a.focus();
                  close();
                  break;
              }
            }
          ]
        },
        $$legacy: true
      }
    ));
  }
  var ul = sibling(node, 2);
  var node_1 = child(ul);
  if_block(node_1, () => get(showResults), ($$anchor2) => {
    var fragment = comment();
    var node_2 = first_child(fragment);
    each(node_2, 1, results, index, ($$anchor3, result, index2) => {
      var li = root_2();
      var node_3 = child(li);
      slot(
        node_3,
        $$props,
        "default",
        {
          get result() {
            return get(result);
          },
          index: index2,
          get value() {
            return value();
          }
        },
        ($$anchor4) => {
          var fragment_1 = comment();
          var node_4 = first_child(fragment_1);
          html(node_4, () => get(result).string, false, false);
          append($$anchor4, fragment_1);
        }
      );
      reset(li);
      template_effect(() => {
        set_attribute(li, "id", `${id() ?? ""}-result-${index2 ?? ""}`);
        set_attribute(li, "aria-selected", strict_equals(get(selectedIndex), index2));
        toggle_class(li, "selected", strict_equals(get(selectedIndex), index2));
        toggle_class(li, "disabled", get(result).disabled);
      });
      event("click", li, () => {
        if (get(result).disabled) return;
        set(selectedIndex, index2);
        select();
      });
      event("mouseenter", li, () => {
        if (get(result).disabled) return;
        set(selectedIndex, index2);
      });
      append($$anchor3, li);
    });
    append($$anchor2, fragment);
  });
  var node_5 = sibling(node_1, 2);
  if_block(node_5, () => $$slots["no-results"] && !get(hideDropdown) && value().length > 0 && strict_equals(results().length, 0), ($$anchor2) => {
    var div_1 = root_4();
    toggle_class(div_1, "no-results", true);
    var node_6 = child(div_1);
    slot(
      node_6,
      $$props,
      "no-results",
      {
        get value() {
          return value();
        }
      },
      null
    );
    reset(div_1);
    append($$anchor2, div_1);
  });
  reset(ul);
  reset(div);
  bind_this(div, ($$value) => set(comboboxRef, $$value), () => get(comboboxRef));
  template_effect(() => {
    set_attribute(div, "aria-controls", `${id() ?? ""}-listbox`);
    set_attribute(div, "aria-expanded", get(showResults));
    set_attribute(div, "id", `${id() ?? ""}-typeahead`);
    toggle_class(div, "dropdown", results().length > 0);
    set_attribute(ul, "aria-labelledby", `${id() ?? ""}-label`);
    set_attribute(ul, "id", `${id() ?? ""}-listbox`);
    toggle_class(ul, "svelte-typeahead-list", true);
  });
  append($$anchor, div);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Typeahead = hmr(Typeahead, () => Typeahead[HMR].source);
  import.meta.hot.accept((module) => {
    cleanup_styles("s-9oVP4gwxNZjj");
    module.default[HMR].source = Typeahead[HMR].source;
    set(Typeahead[HMR].source, module.default[HMR].original);
  });
}
var Typeahead_default = Typeahead;
mark_module_end(Typeahead);
export {
  Typeahead_default as default
};
//# sourceMappingURL=svelte-typeahead.js.map
